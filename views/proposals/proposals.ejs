<head>
  <link rel="stylesheet" href="/css/proposals/proposals.css">
</head>

<body>
  <section class="section2">
    <div class="container-filter">
      <div class="filtro">
        <h2>Filtrar</h2>
        <div class="container-area">
          <label for="area">Área</label>
          <select name="area" id="area">
            <option value="Todos">Todos</option>
            <option value="Design">Design</option>
            <option value="UI design">UI Design</option>
            <option value="3D design">3D Design</option>
            <option value="Canva design">Canva design</option>
            <option value="UX">UX</option>
            <option value="Web design">Web design</option>
            <option value="Interior design">interior design</option>
            <option value="Poster design">Poster Design</option>
          </select>
        </div>
        <div class="container-periodo">
          <label for="periodo">Periodo</label>
          <select name="periodo" id="periodo">
            <option value="hoje">hoje</option>
            <option value="ultimaSemana">Ultima semana</option>
            <option value="ultimoMes">Ultimo mês</option>
          </select>
        </div>
        <div class="container-preco">
          <div class="min">
            <label for="min">Preço Min.</label>
            <input type="text" name="min" id="precomin">
          </div>
          <div class="max">
            <label for="max">Preço Max.</label>
            <input type="text" name="max" id="precomax">
          </div>
        </div>
        <div class="container-botao">
          <button type="submit" id="btnFiltrar">Filtrar</button>
        </div>
      </div>
    </div>

    <div class="propostas">
    </div>
  </section>

  <script type="module">
    import { initializeApp, getApps } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-app.js";
    import { getDatabase, ref, onValue } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-database.js";

    const firebaseConfig = {
      apiKey: "AIzaSyAAtfGyZc3SLzdK10zdq-ALyTyIs1s4qwQ",
      authDomain: "workflow-da28d.firebaseapp.com",
      projectId: "workflow-da28d",
      storageBucket: "workflow-da28d.appspot.com",
      messagingSenderId: "939828605253",
      appId: "1:939828605253:web:0a286fe00f1c29ba614e2c",
      measurementId: "G-3LXB7BR5M1"
    };

    let app;
    if (!getApps().length) {
      app = initializeApp(firebaseConfig);
    } else {
      app = getApps()[0];
    }
    const db = getDatabase(app);

    const propostasContainer = document.querySelector('.section2 .propostas');
    const btnFiltrar = document.getElementById('btnFiltrar');

    let propostas = [];

    function formatarData(isoString) {
      const data = new Date(isoString);
      return isNaN(data) ? "Data inválida" : data.toLocaleDateString('pt-BR', { day: '2-digit', month: 'long', year: 'numeric' });
    }

    function renderizarPropostas(propostasFiltradas) {
      propostasContainer.innerHTML = '';

      if (propostasFiltradas.length === 0) {
        propostasContainer.innerHTML = '<p>Nenhuma proposta encontrada com os filtros selecionados.</p>';
        return;
      }

      propostasFiltradas.forEach(p => {
        const tagsHtml = Array.isArray(p.tags)
          ? p.tags.map(tag => `<span class="tag">${tag}</span>`).join('')
          : '';

        const fotoUrl = p.fotoAutorUrl || 'https://via.placeholder.com/40';
        const nomeAutor = p.nomeAutor || 'Nome não informado';

        const wrapper = document.createElement('div');
        const card = document.createElement('div');
        card.classList.add('proposta-card');

        card.innerHTML = `
  <div class="head">
    <h3>${p.titulo || 'Sem título'}</h3>
    <div class="price">R$${p.precoMin || '-'} - R$${p.precoMax || '-'}</div>
  </div>
  <p class="criadoEm">Criado em ${formatarData(p.datacriacao)}</p>
  <div class="tags">${tagsHtml}</div>
  <p class="description">${p.descricao || ''}</p>
  <div class="client-footer">
    <div class="client">
      <a href="/perfil?id=${p.autorId}" class="profile-link">
        <img class="profilePic" src="${fotoUrl}" alt="${nomeAutor}">
        <span class="client-name">${nomeAutor}</span>
      </a>
    </div>
    <div class="buttons">
      <button class="verMais">Ver mais</button>
      <button class="enviar">se candidatar</button>
    </div>
  </div>
`;



        wrapper.appendChild(card);
        propostasContainer.appendChild(wrapper);
        adicionarEventoBotaoCandidatarse();

      });
    }
    function adicionarEventoBotaoCandidatarse() {
      document.querySelectorAll('.enviar').forEach(botao => {
        botao.addEventListener('click', () => {
          if (botao.classList.contains('enviado')) return;

          botao.classList.add('enviado');

          const check = document.createElement('span');
          check.classList.add('checkmark');
          botao.appendChild(check);

          setTimeout(() => {
            botao.classList.remove('enviado');
            check.remove();
          }, 2000);
        });
      });
    }






    function filtrarPropostas() {
      const area = document.getElementById('area').value;
      const periodo = document.getElementById('periodo').value;
      const precoMin = parseFloat(document.getElementById('precomin').value) || 0;
      const precoMax = parseFloat(document.getElementById('precomax').value) || Infinity;
      const agora = new Date();

      const propostasFiltradas = propostas.filter(p => {
        const dataCriacao = new Date(p.datacriacao);
        if (isNaN(dataCriacao)) return false;

        const dentroDaArea = (area === "Todos") ? true : Array.isArray(p.tags) && p.tags.includes(area);

        let dentroDoPeriodo = true;
        if (periodo === 'hoje') {
          dentroDoPeriodo = dataCriacao.toDateString() === agora.toDateString();
        } else if (periodo === 'ultimaSemana') {
          const seteDiasAtras = new Date(agora);
          seteDiasAtras.setDate(agora.getDate() - 7);
          dentroDoPeriodo = dataCriacao >= seteDiasAtras;
        } else if (periodo === 'ultimoMes') {
          const trintaDiasAtras = new Date(agora);
          trintaDiasAtras.setDate(agora.getDate() - 30);
          dentroDoPeriodo = dataCriacao >= trintaDiasAtras;
        }

        const precoMinProposta = parseFloat(p.precoMin) || 0;
        const precoMaxProposta = parseFloat(p.precoMax) || 0;
        const dentroDoPreco = precoMinProposta >= precoMin && precoMaxProposta <= precoMax;

        return dentroDaArea && dentroDoPeriodo && dentroDoPreco;
      });

      renderizarPropostas(propostasFiltradas);
    }

    document.addEventListener('DOMContentLoaded', () => {
      btnFiltrar.addEventListener('click', (e) => {
        e.preventDefault();
        filtrarPropostas();
      });

      const searchInput = document.querySelector('.searchbar-input');
      const aplicarFiltroPorTitulo = (busca) => {
        if (!busca) {
          renderizarPropostas(propostas);
          return;
        }
        const filtradas = propostas.filter(p =>
          p.titulo?.toLowerCase().includes(busca.toLowerCase())
        );
        renderizarPropostas(filtradas);
      };

      const params = new URLSearchParams(window.location.search);
      const busca = params.get('busca') || '';
      if (searchInput) {
        searchInput.value = busca;
        if (busca) aplicarFiltroPorTitulo(busca);

        searchInput.addEventListener('input', (e) => {
          aplicarFiltroPorTitulo(e.target.value.trim());
        });
      }
    });

    onValue(ref(db, 'Propostas'), (snapshot) => {
      propostas = [];
      snapshot.forEach(childSnap => {
        propostas.push(childSnap.val());
      });

      const params = new URLSearchParams(window.location.search);
      const busca = params.get('busca') || '';
      if (busca) {
        const searchInput = document.querySelector('.searchbar-input');
        if (searchInput) {
          searchInput.value = busca;
          const filtradas = propostas.filter(p =>
            p.titulo?.toLowerCase().includes(busca.toLowerCase())
          );
          renderizarPropostas(filtradas);
        } else {
          renderizarPropostas(propostas);
        }
      } else {
        renderizarPropostas(propostas);
      }
    });
    document.querySelectorAll('.enviar').forEach(botao => {
      botao.addEventListener('click', () => {
        // Se já tiver check, não adiciona de novo
        if (botao.querySelector('.checkmark')) return;

        // Criar o elemento da checkmark
        const check = document.createElement('span');
        check.classList.add('checkmark');
        botao.textContent = 'Enviado'; // Muda texto do botão (opcional)
        botao.appendChild(check);

        // Depois de 2 segundos, volta ao texto original e remove checkmark
        setTimeout(() => {
          botao.textContent = 'se candidatar';
        }, 2000);
      });
    });

  </script>
</body>