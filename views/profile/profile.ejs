<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/css/profile/profile.css">
  <style>
  </style>
</head>
<body>
<div class="preloader-container" id="preloader">
  <div class="loader">
    <img src="/assets/vetors/loader.gif" alt="" style="width: 150px; height: 100%;">
</div>
</div>
<div class="loading"></div>



  <section class="section-1">
    <div class="banner" id="banner">
      <img id="imgBanner" src="default-banner.jpg" alt="banner" style="cursor:pointer;">
       <div class="alterar-texto">CLIQUE PARA ALTERAR</div>
    </div>
    <input type="file" id="inputBanner" accept="image/*" style="display:none" />
  </section>
  
  <section class="card-infos pd-3 flex gap-5">
    <div class="profilePic overflow-hidden bg-gray-50 border border-solid border-gray-100">
      <img class="profile-pic" src="default-profile.jpg" alt="pic" style="width: 100%; height: 100%;">
    </div>
    <div class="buttonsContainer flex flex-1 flex-row justify-center gap-2">
      <div class="infos flex flex-1 flex-col gap-2 justify-center">
        <div class="text-3xl text-white mg-0" id="nome"></div>
        <div class="text-gray-25 mg-0" id="tag"></div>
        <div class="descricao"><p class="p descricao text-sm text-white mg-0" id="bio"></p></div>
      </div>
      <div class="buttons flex flex-row gap-2 justify-end">
       <button class="btn btn-white btn-ghost" id="chatButton">
    <ion-icon name="chatbubble-ellipses-outline" style="font-size: 24px;"></ion-icon>
</button>
        <button class="btn btn-white btn-ghost" id="editarinfos">Editar</button>
        <button class="btn btn-purple" id="contratarButton">Contratar</button>
      </div>
    </div>
  </section>
  <section class="Partes flex flex-row justify-around border-t-0 border-r-0 border-l-0 border-solid border-b border-gray-25">
    <div class="tabs tab-button flex items-center pd-b-2 justify-center border-t-0 border-r-0 border-l-0 border-solid border-b-2 border-white" data-tab="projetos" onclick="mostrarCards('projetos', event)">
      <span class="text text-xl mg-0">Projetos</span>
    </div>
    <div class="tabs tab-button flex items-center pd-b-2 justify-center border-t-0 border-r-0 border-l-0 border-solid border-b border-gray-25" data-tab="curtidos" onclick="mostrarCards('curtidos', event)">
      <span class="text text-xl mg-0">Curtidos</span>
    </div>
    <div class="tabs tab-button flex items-center pd-b-2 justify-center border-t-0 border-r-0 border-l-0 border-solid border-b border-gray-25" data-tab="favoritos" onclick="mostrarCards('favoritos', event)">
      <span class="text text-xl mg-0">Favoritos</span>
    </div>
  </section>


  <section class="cardProjetosPerfil w-full pd-x-3 pd-y-3">
  <main class="card-zone" id="card-zone"></main>
</section>

<dialog id="modalEditar" class="modalEditar closing bg-gray-100 pd-3 border border-solid rounded-lg border-gray">

    <div class="modal-header flex flex-row justify-between items-center w-full pd-y-1">
      <h2 class="text-white text-xl">Editar Perfil</h2>
      <button id="close" class="closemodal" style="background-color: var(--background); border: 0px;"><ion-icon
        name="close-outline" size="large" style="color: var(--white);"></ion-icon></button>
    </div>
    <form id="form-editar">
      <label for="fotoPerfil">Foto Perfil:</label>
    <div class="custom-file form-control">
        <label for="fotoPerfil" class="file-label" id="labelFotoPerfil">Selecionar imagem</label>
        <input type="file" id="fotoPerfil" accept="image/*" class="hidden-file form-control">
      </div>

<label for="input-nome">Nome</label>
<input class="form-control sm" type="text" id="input-nome" placeholder="Digite seu nome"><br>

<label for="input-tag">Tag (Cargo)</label>
<input class="form-control sm" type="text" id="input-tag" placeholder="Ex: UI Designer"><br>

<label for="textarea-bio">Biografia</label>
<textarea class="form-control sm" id="textarea-bio" rows="4" placeholder="Fale um pouco sobre você..."></textarea><br>

      <button type="submit" class="btn btn-purple">Salvar alterações</button>
    </form>

</dialog>
<div id="modalOverlay" class="modalOverlay"></div>


  <dialog class="modalContratar closing bg-gray-100 pd-3 border border-solid rounded-lg border-gray" id="modalContratar">
    <div class="modal-header-contratar flex flex-row justify-between items-center w-full pd-y-1">
      <h2 class="text-white text-xl">Contratar</h2>
      <button id="closeContratar" class="closemodal" style="background-color: var(--background); border: 0px;"><ion-icon
        name="close-outline" size="large" style="color: var(--white);"></ion-icon></button>
    </div>
    <div class="modalContent">
      <label for="mensagemContrato">Mensagem de Contratação</label>
      <textarea id="mensagemContrato" class="form-control sm " rows="4" placeholder="Escreva uma mensagem para o freelancer..."></textarea>
      <label for="meioDeRetorno">Meio de Retorno</label>
      <div class="meioDeRetorno flex flex-row gap-2 justify-center">
        <select class="sm" name="meioDeRetorno" id="meioDeRetorno">
          <option" id="email">Email</option>
          <option id="Telefone">Telefone</option>
          <option id="LinkedIn">LinkedIn</option>
          <option id="Whatsapp">Whatsapp</option>
          <option id="GitHub">GitHub</option>
        </select>
        <input type="text" name="meioDeRetorno" id="meioDeRetorno" class="form-control sm" placeholder="Cole o link de contato nessa área">
      </div>
      <div class="buttonContainerModal flex flex-row justify-end mg-t-4">
        <button type="submit" class="btn btn-purple">Enviar</button>
      </div>
    </div>
</dialog>


<script type="module" src="/js/perfil.js"></script>

<script>
  const modal = document.getElementById('modalEditar');
  const buttonOpen = document.getElementById("editarinfos");
  const buttonClose = document.getElementById('close');
  const overlay = document.getElementById('modalOverlay');

    // Abrir o modal
buttonOpen.onclick = function () {
    modal.showModal();
    overlay.classList.add("active");
    modal.classList.remove("closing");
    modal.classList.add("opening");
    overlay.classList.add("active");
    setTimeout(() => modal.classList.add("open"), 10);
    const nomeDisplay = document.getElementById('nome').textContent;
    const tagDisplay = document.getElementById('tag').textContent;
    const bioDisplay = document.getElementById('bio').textContent;
    document.getElementById('input-nome').value = nomeDisplay || '';
    document.getElementById('input-tag').value = tagDisplay || '';
    document.getElementById('textarea-bio').value = bioDisplay || '';
};
    buttonClose.onclick = closeModal;

    function closeModal() {
      modal.classList.remove("opening");
      modal.classList.add("closing");
      overlay.classList.remove("active");
        setTimeout(() => {
            modal.classList.remove("closing");
            modal.close();
        }, 300);
    }

    window.onclick = function (event) {
      const modal = document.getElementById('modal-editar');
      if (event.target === modal) {
        modal.style.display = "none";
      }
    }
  
    document.getElementById('fotoPerfil').addEventListener('change', (event) => {
      const file = event.target.files[0];
      if (file) {
        const imgPerfil = document.querySelector('.profile-pic img');
        imgPerfil.src = URL.createObjectURL(file);
      }
    });
  
    document.getElementById('fotoPerfil').addEventListener('change', (e) => {
      const label = document.getElementById('labelFotoPerfil');
      const file = e.target.files[0];
      label.textContent = file ? file.name : 'Selecionar imagem';
    });

</script>

<script>
  const modalContratar = document.getElementById('modalContratar');
  const buttonOpenContratar = document.getElementById("contratarButton");
  const buttonCloseContratar = document.getElementById('closeContratar');

  buttonOpenContratar.onclick = function () {
    modalContratar.showModal();
    modalContratar.classList.remove("closing");
    modalContratar.classList.add("opening");
    setTimeout(() => modalContratar.classList.add("open"), 10);
    
};
    buttonCloseContratar.onclick = closeModal;

    function closeModal() {
      modalContratar.classList.remove("opening");
      modalContratar.classList.add("closing");
      overlay.classList.remove("active");
        setTimeout(() => {
            modalContratar.classList.remove("closing");
            modalContratar.close();
        }, 300);
    }

</script>

<script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-app.js";
    import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-auth.js";
    import { getDatabase, ref, get, update, child, set, push } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-database.js";
    import { createClient } from "https://esm.sh/@supabase/supabase-js";

    const firebaseConfig = {
        apiKey: "AIzaSyAAtfGyZc3SLzdK10zdq-ALyTyIs1s4qwQ",
        authDomain: "workflow-da28d.firebaseapp.com",
        projectId: "workflow-da28d",
        storageBucket: "workflow-da28d.firebasestorage.app",
        messagingSenderId: "939828605253",
        appId: "1:939828605253:web:0a286fe00f1c29ba614e2c",
        measurementId: "G-3LXB7BR5M1"
    };
    initializeApp(firebaseConfig);
    const supabase = createClient(
        "https://uvvquwlgbkdcnchiyqzs.supabase.co",
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InV2dnF1d2xnYmtkY25jaGl5cXpzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY0ODA2OTQsImV4cCI6MjA2MjA1NjY5NH0.SnVqdpZa1V_vjJvoupVFAXjg0_2ih7KlfUa1s3vuzhE"
    );

    const auth = getAuth();
    const db = getDatabase();

    const imgPerfil = document.querySelector('.profilePic img');
    const h1Nome = document.getElementById('nome');
    const pTag = document.getElementById('tag');
    const pBio = document.getElementById('bio');
    const imgBanner = document.getElementById('imgBanner');
    const inputBanner = document.getElementById('inputBanner');
    const editarButton = document.getElementById('editarinfos');
    const chatButton = document.getElementById('chatButton');
    const contratarButton = document.getElementById('contratarButton');

    let currentUserUid = null;
    let currentTipoUsuario = null;

    function getUidFromURL() {
        const params = new URLSearchParams(window.location.search);
        return params.get('id');
    }

    async function detectarTipoUsuario(uid) {
        const dbRef = ref(db);
        if ((await get(child(dbRef, `Freelancer/${uid}`))).exists()) return 'Freelancer';
        if ((await get(child(dbRef, `Contratante/${uid}`))).exists()) return 'Contratante';
        return null;
    }

    async function uploadImageToSupabase(file, folder, bucketName) {
        const path = `${folder}/${Date.now()}_${file.name}`;
        const { error } = await supabase.storage.from(bucketName).upload(path, file);
        if (error) throw error;
        const { data: publicUrlData } = supabase.storage.from(bucketName).getPublicUrl(path);
        return publicUrlData.publicUrl;
    }

    async function iniciarConversa(userIdContato, nomeContato, avatarContato) {
        const authUser = auth.currentUser;

        if (!authUser) {
            alert('Você precisa estar logado para iniciar uma conversa.');
            return;
        }

        const userIdLogado = authUser.uid;
        
        try {
            const db = getDatabase();

            const conversaLogadoRef = ref(db, `Conversas/${userIdLogado}/${userIdContato}`);
            const conversaContatoRef = ref(db, `Conversas/${userIdContato}/${userIdLogado}`);

            const [snapshotLogado, snapshotContato] = await Promise.all([
                get(conversaLogadoRef),
                get(conversaContatoRef)
            ]);

            if (snapshotLogado.exists() && snapshotContato.exists()) {
                window.location.href = `/chat?user=${userIdContato}`;
                return;
            }

            let dadosUserLogado = null;
            const snapshotFreelancer = await get(ref(db, `Freelancer/${userIdLogado}`));
            if (snapshotFreelancer.exists()) {
                dadosUserLogado = snapshotFreelancer.val();
            } else {
                const snapshotContratante = await get(ref(db, `Contratante/${userIdLogado}`));
                if (snapshotContratante.exists()) {
                    dadosUserLogado = snapshotContratante.val();
                }
            }

            if (!dadosUserLogado) {
                alert("Erro ao obter seus dados para criar a conversa.");
                return;
            }

            const timestampAgora = Date.now();

            await Promise.all([
                set(conversaLogadoRef, {
                    nome: nomeContato,
                    avatar: avatarContato,
                    timestamp: timestampAgora
                }),
                set(conversaContatoRef, {
                    nome: dadosUserLogado.nome || '',
                    avatar: dadosUserLogado.foto_perfil || '',
                    timestamp: timestampAgora
                })
            ]);

            const mensagensRef = ref(db, `Conversas/${userIdLogado}/${userIdContato}/mensagens`);
            await push(mensagensRef, {
                autor: userIdLogado,
                texto: "Você iniciou uma conversa.",
                timestamp: timestampAgora
            });

            alert("Contato salvo! Agora você será redirecionado ao chat.");
            window.location.href = `/chat?user=${userIdContato}`;
        } catch (error) {
            console.error("Erro ao salvar contato:", error);
            alert("Erro ao salvar contato. Tente novamente mais tarde.");
        }
    }


    onAuthStateChanged(auth, async (user) => {
        if (editarButton) editarButton.style.display = 'none';
        if (chatButton) chatButton.style.display = 'none';
        if (contratarButton) contratarButton.style.display = 'none';
        
        const uidFromURL = getUidFromURL();

        if (!user) {
            return;
        }

        const loggedInUserUid = user.uid;
        currentUserUid = uidFromURL || loggedInUserUid;
        
        if (currentUserUid === loggedInUserUid) {
            if (editarButton) editarButton.style.display = 'flex';
        } else {
            if (chatButton) chatButton.style.display = 'flex';
            if (contratarButton) contratarButton.style.display = 'flex';
        }
        
        currentTipoUsuario = await detectarTipoUsuario(currentUserUid);
        if (!currentTipoUsuario) return;

        const snap = await get(ref(db, `${currentTipoUsuario}/${currentUserUid}`));
        if (snap.exists()) {
            const data = snap.val();
            if (data.foto_perfil) imgPerfil.src = data.foto_perfil;
            if (data.nome) h1Nome.textContent = data.nome;
            if (data.tag) pTag.textContent = data.tag;
            if (data.bio) pBio.textContent = data.bio;
            if (data.banner) imgBanner.src = data.banner;
            
            if (chatButton) {
                chatButton.addEventListener('click', async () => {
                    const userIdToContact = currentUserUid;
                    const nomeToContact = h1Nome.textContent;
                    const avatarToContact = imgPerfil.src;

                    await iniciarConversa(userIdToContact, nomeToContact, avatarToContact);
                });
            }
        }

        if (currentUserUid === loggedInUserUid) {
            imgBanner.style.cursor = 'pointer';
            document.getElementById('banner').classList.add('editable');

            document.getElementById('banner').addEventListener('click', () => {
                inputBanner.click();
            });
        } else {
            imgBanner.style.cursor = 'default';
            document.getElementById('banner').classList.remove('editable');
        }
    });

inputBanner.addEventListener('change', async () => {
    const file = inputBanner.files[0];
    if (!file || !currentUserUid || !currentTipoUsuario) return;

    try {
      const bucket = currentTipoUsuario === 'Freelancer' ? 'freelancer-photos' : 'contratante-photos';
      const bannerUrl = await uploadImageToSupabase(file, currentUserUid, bucket);
      
      imgBanner.src = bannerUrl;
      await update(ref(db, `${currentTipoUsuario}/${currentUserUid}`), { banner: bannerUrl });
    } catch (error) {
      console.error("Erro ao atualizar banner:", error);
    }
  });

    const formEditar = document.getElementById('form-editar');
    const inputNome = document.getElementById('input-nome');
    const inputTag = document.getElementById('input-tag');
    const textareaBio = document.getElementById('textarea-bio');
    const inputFotoPerfil = document.getElementById('fotoPerfil'); 

    formEditar.addEventListener('submit', async (e) => {
        e.preventDefault(); 
        
        const novoNome = inputNome.value;
        const novaTag = inputTag.value;
        const novaBio = textareaBio.value;
        const novaFotoFile = inputFotoPerfil.files[0];

        if (!currentUserUid || !currentTipoUsuario) {
            console.error("UID do usuário ou tipo de usuário não definido.");
            return;
        }

        try {
            const dadosAtualizados = {
                nome: novoNome,
                tag: novaTag,
                bio: novaBio
            };
            
            if (novaFotoFile) {
                const bucket = currentTipoUsuario === 'Freelancer' ? 'freelancer-photos' : 'contratante-photos';
                const fotoUrl = await uploadImageToSupabase(novaFotoFile, currentUserUid, bucket);
                dadosAtualizados.foto_perfil = fotoUrl; 
            }

            await update(ref(db, `${currentTipoUsuario}/${currentUserUid}`), dadosAtualizados);

            document.getElementById('nome').textContent = novoNome;
            document.getElementById('tag').textContent = novaTag;
            document.getElementById('bio').textContent = novaBio;
            if (dadosAtualizados.foto_perfil) {
                imgPerfil.src = dadosAtualizados.foto_perfil;
            }

            closeModal(); 
            console.log("Perfil atualizado com sucesso!");
        } catch (error) {
            console.error("Erro ao atualizar perfil:", error);
        }
    });
</script>
<script>
  function mostrarCards(tipo) {
    document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
    event.currentTarget.classList.add('active');

    console.log("Selecionado:", tipo);

    document.querySelectorAll('.card_projeto').forEach(el => {
      el.style.display = 'block';
    });
  }
</script>
<script type="module" src="/js/perfil.js"></script>
<script src="/js/preloader.js"></script>
</body>
</html>