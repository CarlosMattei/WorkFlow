<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/css/profile/profile.css">
  <style>
  </style>
</head>
<body>
<div class="preloader-container" id="preloader">
  <div class="loader">
    <img src="/assets/vetors/loader.gif" alt="" style="width: 150px; height: 100%;">
</div>
</div>
<div class="loading"></div>



  <section class="section-1">
    <div class="banner" id="banner">
      <img id="imgBanner" src="default-banner.jpg" alt="banner" style="cursor:pointer;">
    </div>
    <input type="file" id="inputBanner" accept="image/*" style="display:none" />
  </section>
  
  <section class="card-infos pd-3 flex gap-5">
    <div class="profilePic perfilPic overflow-hidden bg-gray-50 border border-solid border-gray-100">
      <img class="profile-pic" src="default-profile.jpg" alt="pic" style="width: 100%; height: 100%; object-fit: cover;">
    </div>
    <div class="buttonsContainer flex flex-1 flex-row justify-center gap-2">
      <div class="infos flex flex-1 flex-col gap-2 justify-center">
        <div class="text-3xl text-white mg-0" id="nome"></div>
        <div class="text-gray-25 mg-0" id="tag"></div>
        <div class="descricao"><p class="p descricao text-sm text-white mg-0" id="bio"></p></div>
      </div>
      <div class="buttons flex flex-row gap-2 justify-end">
       <button class="btn btn-white btn-ghost" id="chatButton">
    <ion-icon name="chatbubble-ellipses-outline" style="font-size: 24px;"></ion-icon>
</button>
        <button class="btn btn-white btn-ghost" id="editarinfos">Editar</button>
        <button class="btn btn-purple" id="contratarButton">Contratar</button>
      </div>
    </div>
  </section>
  <section class="Partes flex flex-row justify-around border-t-0 border-r-0 border-l-0 border-solid border-b border-gray-25">
    <div class="tabs tab-button flex items-center pd-b-2 justify-center border-t-0 border-r-0 border-l-0 border-solid border-b-2 border-white" data-tab="projetos" onclick="mostrarCards('projetos', event)">
      <span class="text text-xl mg-0">Projetos</span>
    </div>
    <div class="tabs tab-button flex items-center pd-b-2 justify-center border-t-0 border-r-0 border-l-0 border-solid border-b border-gray-25" data-tab="curtidos" onclick="mostrarCards('curtidos', event)">
      <span class="text text-xl mg-0">Curtidos</span>
    </div>
    <div class="tabs tab-button flex items-center pd-b-2 justify-center border-t-0 border-r-0 border-l-0 border-solid border-b border-gray-25" data-tab="favoritos" onclick="mostrarCards('favoritos', event)">
      <span class="text text-xl mg-0">Favoritos</span>
    </div>
  </section>


  <section class="cardProjetosPerfil w-full pd-x-3 pd-y-3">
  <main class="card-zone" id="card-zone"></main>
</section>

<dialog id="modalEditar" class="modalEditar closing bg-gray-100 pd-3 border border-solid rounded-lg border-gray">

    <div class="modal-header flex flex-row justify-between items-center w-full pd-y-1">
      <h2 class="text-white text-xl">Editar Perfil</h2>
      <button id="close" class="closemodal" style="background-color: var(--background); border: 0px;"><ion-icon
        name="close-outline" size="large" style="color: var(--white);"></ion-icon></button>
    </div>
    <form id="form-editar">
      <label for="fotoPerfil">Foto Perfil:</label>
    <div class="custom-file form-control">
        <label for="fotoPerfil" class="file-label" id="labelFotoPerfil">Selecionar imagem</label>
        <input type="file" id="fotoPerfil" accept="image/*" class="hidden-file form-control">
      </div>

<label for="input-nome">Nome</label>
<input class="form-control sm" type="text" id="input-nome" placeholder="Digite seu nome"><br>

<label for="input-tag">Tag (Cargo)</label>
<input class="form-control sm" type="text" id="input-tag" placeholder="Ex: UI Designer"><br>

<label for="textarea-bio">Biografia</label>
<textarea class="form-control sm" id="textarea-bio" rows="4" placeholder="Fale um pouco sobre você..."></textarea><br>

      <button type="submit" class="btn btn-purple">Salvar alterações</button>
    </form>

</dialog>
<div id="modal-overlay" class="modal-overlay">
  <div class="floating-island" id="floatingIsland">
            <div class="island-content">
                <div class="island-left">
                    <img src="" alt="Profile pic" id="islandUserPhoto" class="island-user-photo">
                    <div class="island-info">
                        <h3 id="islandProjectTitle">Nome do Projeto</h3>
                        <p id="islandCreatorName">Criado por <span id="islandCreatorSpan"></span></p>
                    </div>
                </div>
                <div class="island-right">
                    <button class="island-btn comment-btn" id="commentBtn" title="Comentar">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"
                                stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                    </button>
                    <button class="island-btn like-btn" id="likeBtn" title="Curtir">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path
                                d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"
                                stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                    </button>
                    <button class="island-btn close-btn" id="modalCloseBtn" title="Fechar">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                stroke-linejoin="round" />
                        </svg>
                    </button>
                </div>
            </div>
        </div>

        <div class="modal">
            <div class="modal-header flex flex-col justify-center items-center pd-y-16">
                <div class="modal-titulo">
                    <h1 class="text-5xl mg-0">Lorem Ipsum</h1>
                </div>
                <div class="modal-creator mg-0">
                    <p>Projeto criado por <a href="" class="user-name-modal"></a></p>
                </div>
            </div>

            <div class="conteudoProjeto pd-x-10" id="modal-componentes">
            </div>

            <div
                class="section-infos flex justify-between items-start gap-8 pd-4 mg-4 rounded-2xl bg-gradient-primary border border-gray-50">
                <div class="project-info-container flex flex-col gap-6 flex-1">
                    <div class="titulo-container">
                        <h1 id="txtTituloTag" class="text-2xl font-bold text-white mg-0 mg-b-4">Lorem Ipsun</h1>
                    </div>
                    <div id="modalTagsContainer" class="tags-container flex flex-wrap gap-2 mg-b-4">
                        <span
                            class="tag-span bg-gray-25 text-white pd-2 pd-x-4 rounded-full text-sm font-medium border border-gray-50">UI
                            Design</span>
                        <span
                            class="tag-span bg-gray-25 text-white pd-2 pd-x-4 rounded-full text-sm font-medium border border-gray-50">Design
                            WEB</span>
                        <span
                            class="tag-span bg-gray-25 text-white pd-2 pd-x-4 rounded-full text-sm font-medium border border-gray-50">UX</span>
                    </div>
                    <div class="data-container border-t border-gray-50 pd-t-4">
                        <p id="data-criado" class="data-criado text-sm text-gray mg-0">criado em 23 de maio de 2023</p>
                    </div>
                </div>

                <div class="author-profile-container bg-gray-75 flex flex-1 flex-col max-w-full" style="width: 400px;">
                    <div class="card-autor">
                        <div class="card-autor-header">
                            <div class="autor-info">
                                <div class="autor-avatar">
                                    <img src="" id="modalUserPhoto" alt="Foto do perfil">
                                </div>
                                <div class="autor-details">
                                    <h3 id="modalAutor">Nome do Autor</h3>
                                    <p id="modalTag">Designer Web</p>
                                    <div class="autor-stats">
                                        <span class="stat">
                                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none"
                                                xmlns="http://www.w3.org/2000/svg">
                                                <path d="M12 2L2 7L12 12L22 7L12 2Z" stroke="currentColor"
                                                    stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                                <path d="M2 17L12 22L22 17" stroke="currentColor" stroke-width="2"
                                                    stroke-linecap="round" stroke-linejoin="round" />
                                                <path d="M2 12L12 17L22 12" stroke="currentColor" stroke-width="2"
                                                    stroke-linecap="round" stroke-linejoin="round" />
                                            </svg>
                                            24 projetos
                                        </span>
                                        <span class="stat">
                                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none"
                                                xmlns="http://www.w3.org/2000/svg">
                                                <path
                                                    d="M12 20.94C11.5 20.94 11.05 20.79 10.65 20.49C10.25 20.19 9.95 19.79 9.75 19.29C9.55 18.79 9.5 18.25 9.6 17.67C9.7 17.09 9.95 16.57 10.35 16.11C10.75 15.65 11.25 15.3 11.85 15.06C12.45 14.82 13.1 14.7 13.8 14.7C14.5 14.7 15.15 14.82 15.75 15.06C16.35 15.3 16.85 15.65 17.25 16.11C17.65 16.57 17.9 17.09 18 17.67C18.1 18.25 18.05 18.79 17.85 19.29C17.65 19.79 17.35 20.19 16.95 20.49C16.55 20.79 16.1 20.94 15.6 20.94H12Z"
                                                    stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                                    stroke-linejoin="round" />
                                                <path
                                                    d="M12 2C13.1 2 14.1 2.4 14.9 3.2C15.7 4 16.1 5 16.1 6.1C16.1 7.2 15.7 8.2 14.9 9C14.1 9.8 13.1 10.2 12 10.2C10.9 10.2 9.9 9.8 9.1 9C8.3 8.2 7.9 7.2 7.9 6.1C7.9 5 8.3 4 9.1 3.2C9.9 2.4 10.9 2 12 2Z"
                                                    stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                                    stroke-linejoin="round" />
                                            </svg>
                                            4.8 ⭐
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="autor-actions">
                                <button class="btn flex flex-1 gap-3 pd-y-5 btn-success" id="contactar">
                                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none"
                                        xmlns="http://www.w3.org/2000/svg">
                                        <path d="M22 2H2V22L6 18H22V2Z" stroke="currentColor" stroke-width="2"
                                            stroke-linecap="round" stroke-linejoin="round" />
                                    </svg>
                                    Contatar
                                </button>
                                <button id="btnVerPerfil" class="btn pd-y-5 gap-3 flex flex-1 btn-purple">
                                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none"
                                        xmlns="http://www.w3.org/2000/svg">
                                        <path
                                            d="M20 21V19C20 17.9391 19.5786 16.9217 18.8284 16.1716C18.0783 15.4214 17.0609 15 16 15H8C6.93913 15 5.92172 15.4214 5.17157 16.1716C4.42143 16.9217 4 17.9391 4 19V21"
                                            stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                            stroke-linejoin="round" />
                                        <circle cx="12" cy="7" r="4" stroke="currentColor" stroke-width="2"
                                            stroke-linecap="round" stroke-linejoin="round" />
                                    </svg>
                                    Ver Perfil
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Chat do Projeto -->
            <div id="chat"
                class="chat-projeto-container flex flex-col gap-4 pd-3 mg-3 rounded-2xl bg-gray-75 border border-gray-50">
                <div class="chat-header flex items-center gap-2 mg-b-0">
                    <svg width="22" height="22" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z" stroke="currentColor"
                            stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                    </svg>
                    <h2 class="text-lg font-bold mg-0 text-white">Chat</h2>
                </div>
                <form id="chatForm" class="chat-form flex gap-2 items-center" autocomplete="off"
                    onsubmit="return false;">
                    <input id="commentInput" type="text" class="form-control" placeholder="Digite sua mensagem..."
                        maxlength="300" style="margin-bottom:0;" />
                    <button id="btnEnviarComentario" class="btn btn-success mg-0" type="submit" title="Enviar">
                        <svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M22 2L11 13" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                stroke-linejoin="round" />
                            <path d="M22 2L15 22L11 13L2 9L22 2Z" stroke="currentColor" stroke-width="2"
                                stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                    </button>
                </form>
                <div id="containerComentarios" class="chat-mensagens flex flex-col gap-3 pd-2 bg-gray-50 rounded-md"
                    style="max-height: 220px; overflow-y: auto; min-height: 120px;"></div>
            </div>
            <!-- Fim do Chat do Projeto -->

        </div>
</div>


  <dialog class="modalContratar closing bg-gray-100 pd-3 border border-solid rounded-lg border-gray" id="modalContratar">
    <div class="modal-header-contratar flex flex-row justify-between items-center w-full pd-y-1">
      <h2 class="text-white text-xl">Contratar</h2>
      <button id="closeContratar" class="closemodal" style="background-color: var(--background); border: 0px;"><ion-icon
        name="close-outline" size="large" style="color: var(--white);"></ion-icon></button>
    </div>
    <div class="modalContent">
      <label for="mensagemContrato">Mensagem de Contratação</label>
      <textarea id="mensagemContrato" class="form-control sm " rows="4" placeholder="Escreva uma mensagem para o freelancer..."></textarea>
      <label for="meioDeRetorno">Meio de Retorno</label>
      <div class="meioDeRetorno flex flex-row gap-2 justify-center">
        <select class="sm" name="meioDeRetorno" id="meioDeRetorno">
          <option" id="email">Email</option>
          <option id="Telefone">Telefone</option>
          <option id="LinkedIn">LinkedIn</option>
          <option id="Whatsapp">Whatsapp</option>
          <option id="GitHub">GitHub</option>
        </select>
        <input type="text" name="meioDeRetorno" id="meioDeRetorno" class="form-control sm" placeholder="Cole o link de contato nessa área">
      </div>
      <div class="buttonContainerModal flex flex-row justify-end mg-t-4">
        <button type="submit" class="btn btn-purple">Enviar</button>
      </div>
    </div>
</dialog>


<script type="module" src="/js/perfil.js"></script>

<script>
  const modal = document.getElementById('modalEditar');
  const buttonOpen = document.getElementById("editarinfos");
  const buttonClose = document.getElementById('close');
  const overlay = document.getElementById('modalOverlay');

  // Abrir o modal
  buttonOpen.onclick = function () {
    modal.showModal();
    modal.classList.remove("closing");
    modal.classList.add("opening");
    if (overlay) overlay.classList.add("active");
    setTimeout(() => modal.classList.add("open"), 10);
    const nomeDisplay = document.getElementById('nome').textContent;
    const tagDisplay = document.getElementById('tag').textContent;
    const bioDisplay = document.getElementById('bio').textContent;
    document.getElementById('input-nome').value = nomeDisplay || '';
    document.getElementById('input-tag').value = tagDisplay || '';
    document.getElementById('textarea-bio').value = bioDisplay || '';
  };

  buttonClose.onclick = closeModal;

  function closeModal() {
    if (!modal) return;
    modal.classList.remove("opening");
    modal.classList.add("closing");
    if (overlay) overlay.classList.remove("active");
    setTimeout(() => {
      modal.classList.remove("closing");
      modal.close();
    }, 300);
  }
</script>

<script>
  const modalContratar = document.getElementById('modalContratar');
  const buttonOpenContratar = document.getElementById("contratarButton");
  const buttonCloseContratar = document.getElementById('closeContratar');
  const overlayContratar = document.getElementById('modalOverlay');

  buttonOpenContratar.onclick = function () {
    modalContratar.showModal();
    modalContratar.classList.remove("closing");
    modalContratar.classList.add("opening");
    if (overlayContratar) overlayContratar.classList.add("active");
    setTimeout(() => modalContratar.classList.add("open"), 10);
  };

  buttonCloseContratar.onclick = closeModalContratar;

  function closeModalContratar() {
    if (!modalContratar) return;
    modalContratar.classList.remove("opening");
    modalContratar.classList.add("closing");
    if (overlayContratar) overlayContratar.classList.remove("active");
    setTimeout(() => {
      modalContratar.classList.remove("closing");
      modalContratar.close();
    }, 300);
  }
</script>

<script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-app.js";
    import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-auth.js";
    import { getDatabase, ref, get, update, child, set, push } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-database.js";
    import { createClient } from "https://esm.sh/@supabase/supabase-js";

    const firebaseConfig = {
        apiKey: "AIzaSyAAtfGyZc3SLzdK10zdq-ALyTyIs1s4qwQ",
        authDomain: "workflow-da28d.firebaseapp.com",
        projectId: "workflow-da28d",
        storageBucket: "workflow-da28d.firebasestorage.app",
        messagingSenderId: "939828605253",
        appId: "1:939828605253:web:0a286fe00f1c29ba614e2c",
        measurementId: "G-3LXB7BR5M1"
    };
    initializeApp(firebaseConfig);
    const supabase = createClient(
        "https://uvvquwlgbkdcnchiyqzs.supabase.co",
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InV2dnF1d2xnYmtkY25jaGl5cXpzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY0ODA2OTQsImV4cCI6MjA2MjA1NjY5NH0.SnVqdpZa1V_vjJvoupVFAXjg0_2ih7KlfUa1s3vuzhE"
    );

    const auth = getAuth();
    const db = getDatabase();

    const imgPerfil = document.querySelector('.profilePic img');
    const h1Nome = document.getElementById('nome');
    const pTag = document.getElementById('tag');
    const pBio = document.getElementById('bio');
    const imgBanner = document.getElementById('imgBanner');
    const inputBanner = document.getElementById('inputBanner');
    const editarButton = document.getElementById('editarinfos');
    const chatButton = document.getElementById('chatButton');
    const contratarButton = document.getElementById('contratarButton');

    let currentUserUid = null;
    let currentTipoUsuario = null;

    function getUidFromURL() {
        const params = new URLSearchParams(window.location.search);
        return params.get('id');
    }

    async function detectarTipoUsuario(uid) {
        const dbRef = ref(db);
        if ((await get(child(dbRef, `Freelancer/${uid}`))).exists()) return 'Freelancer';
        if ((await get(child(dbRef, `Contratante/${uid}`))).exists()) return 'Contratante';
        return null;
    }

    async function uploadImageToSupabase(file, folder, bucketName) {
        const path = `${folder}/${Date.now()}_${file.name}`;
        const { error } = await supabase.storage.from(bucketName).upload(path, file);
        if (error) throw error;
        const { data: publicUrlData } = supabase.storage.from(bucketName).getPublicUrl(path);
        return publicUrlData.publicUrl;
    }

    async function iniciarConversa(userIdContato, nomeContato, avatarContato) {
        const authUser = auth.currentUser;

        if (!authUser) {
            alert('Você precisa estar logado para iniciar uma conversa.');
            return;
        }

        const userIdLogado = authUser.uid;
        
        try {
            const db = getDatabase();

            const conversaLogadoRef = ref(db, `Conversas/${userIdLogado}/${userIdContato}`);
            const conversaContatoRef = ref(db, `Conversas/${userIdContato}/${userIdLogado}`);

            const [snapshotLogado, snapshotContato] = await Promise.all([
                get(conversaLogadoRef),
                get(conversaContatoRef)
            ]);

            if (snapshotLogado.exists() && snapshotContato.exists()) {
                window.location.href = `/chat?user=${userIdContato}`;
                return;
            }

            let dadosUserLogado = null;
            const snapshotFreelancer = await get(ref(db, `Freelancer/${userIdLogado}`));
            if (snapshotFreelancer.exists()) {
                dadosUserLogado = snapshotFreelancer.val();
            } else {
                const snapshotContratante = await get(ref(db, `Contratante/${userIdLogado}`));
                if (snapshotContratante.exists()) {
                    dadosUserLogado = snapshotContratante.val();
                }
            }

            if (!dadosUserLogado) {
                alert("Erro ao obter seus dados para criar a conversa.");
                return;
            }

            const timestampAgora = Date.now();

            await Promise.all([
                set(conversaLogadoRef, {
                    nome: nomeContato,
                    avatar: avatarContato,
                    timestamp: timestampAgora
                }),
                set(conversaContatoRef, {
                    nome: dadosUserLogado.nome || '',
                    avatar: dadosUserLogado.foto_perfil || '',
                    timestamp: timestampAgora
                })
            ]);

            const mensagensRef = ref(db, `Conversas/${userIdLogado}/${userIdContato}/mensagens`);
            await push(mensagensRef, {
                autor: userIdLogado,
                texto: "Você iniciou uma conversa.",
                timestamp: timestampAgora
            });

            alert("Contato salvo! Agora você será redirecionado ao chat.");
            window.location.href = `/chat?user=${userIdContato}`;
        } catch (error) {
            console.error("Erro ao salvar contato:", error);
            alert("Erro ao salvar contato. Tente novamente mais tarde.");
        }
    }


    onAuthStateChanged(auth, async (user) => {
    if (editarButton) editarButton.style.display = 'none';
    if (chatButton) chatButton.style.display = 'none';
    if (contratarButton) contratarButton.style.display = 'none';

    const uidFromURL = getUidFromURL();

    if (!user) {
        return;
    }

    const loggedInUserUid = user.uid;
    currentUserUid = uidFromURL || loggedInUserUid;

    const tipoUsuarioLogado = await detectarTipoUsuario(loggedInUserUid);
    const tipoUsuarioPerfil = await detectarTipoUsuario(currentUserUid);
    
    if (currentUserUid === loggedInUserUid) {
        if (editarButton) editarButton.style.display = 'flex';
        
        if (contratarButton) contratarButton.style.display = 'none';
    } else {
        if (chatButton) chatButton.style.display = 'flex';

        if (tipoUsuarioLogado === 'Contratante' && tipoUsuarioPerfil === 'Freelancer') {
            if (contratarButton) contratarButton.style.display = 'flex';
        } else {
            if (contratarButton) contratarButton.style.display = 'none';
        }
    }
        
        currentTipoUsuario = await detectarTipoUsuario(currentUserUid);
        if (!currentTipoUsuario) return;

        const snap = await get(ref(db, `${currentTipoUsuario}/${currentUserUid}`));
        if (snap.exists()) {
            const data = snap.val();
            if (data.foto_perfil) imgPerfil.src = data.foto_perfil;
            if (data.nome) h1Nome.textContent = data.nome;
            if (data.tag) pTag.textContent = data.tag;
            if (data.bio) pBio.textContent = data.bio;
            if (data.banner) imgBanner.src = data.banner;
            
            if (chatButton) {
                chatButton.addEventListener('click', async () => {
                    const userIdToContact = currentUserUid;
                    const nomeToContact = h1Nome.textContent;
                    const avatarToContact = imgPerfil.src;

                    await iniciarConversa(userIdToContact, nomeToContact, avatarToContact);
                });
            }
        }

        if (currentUserUid === loggedInUserUid) {
            imgBanner.style.cursor = 'pointer';
            document.getElementById('banner').classList.add('editable');

            document.getElementById('banner').addEventListener('click', () => {
                inputBanner.click();
            });
        } else {
            imgBanner.style.cursor = 'default';
            document.getElementById('banner').classList.remove('editable');
        }
    });

inputBanner.addEventListener('change', async () => {
    const file = inputBanner.files[0];
    if (!file || !currentUserUid || !currentTipoUsuario) return;

    try {
      const bucket = currentTipoUsuario === 'Freelancer' ? 'freelancer-photos' : 'contratante-photos';
      const bannerUrl = await uploadImageToSupabase(file, currentUserUid, bucket);
      
      imgBanner.src = bannerUrl;
      await update(ref(db, `${currentTipoUsuario}/${currentUserUid}`), { banner: bannerUrl });
    } catch (error) {
      console.error("Erro ao atualizar banner:", error);
    }
  });

    const formEditar = document.getElementById('form-editar');
    const inputNome = document.getElementById('input-nome');
    const inputTag = document.getElementById('input-tag');
    const textareaBio = document.getElementById('textarea-bio');
    const inputFotoPerfil = document.getElementById('fotoPerfil'); 

    formEditar.addEventListener('submit', async (e) => {
        e.preventDefault(); 
        
        const novoNome = inputNome.value;
        const novaTag = inputTag.value;
        const novaBio = textareaBio.value;
        const novaFotoFile = inputFotoPerfil.files[0];

        if (!currentUserUid || !currentTipoUsuario) {
            console.error("UID do usuário ou tipo de usuário não definido.");
            return;
        }

        try {
            const dadosAtualizados = {
                nome: novoNome,
                tag: novaTag,
                bio: novaBio
            };
            
            if (novaFotoFile) {
                const bucket = currentTipoUsuario === 'Freelancer' ? 'freelancer-photos' : 'contratante-photos';
                const fotoUrl = await uploadImageToSupabase(novaFotoFile, currentUserUid, bucket);
                dadosAtualizados.foto_perfil = fotoUrl; 
            }

            await update(ref(db, `${currentTipoUsuario}/${currentUserUid}`), dadosAtualizados);

            document.getElementById('nome').textContent = novoNome;
            document.getElementById('tag').textContent = novaTag;
            document.getElementById('bio').textContent = novaBio;
            if (dadosAtualizados.foto_perfil) {
                imgPerfil.src = dadosAtualizados.foto_perfil;
            }

            closeModal(); 
            console.log("Perfil atualizado com sucesso!");
        } catch (error) {
            console.error("Erro ao atualizar perfil:", error);
        }
    });
</script>
<script>
  function mostrarCards(tipo) {
    document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
    event.currentTarget.classList.add('active');

    console.log("Selecionado:", tipo);

    document.querySelectorAll('.card_projeto').forEach(el => {
      el.style.display = 'block';
    });
  }
</script>

<script type="module" src="/js/perfil.js"></script>
<script src="/js/preloader.js"></script>
</body>
</html>